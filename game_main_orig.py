import json
import re
from gensim.models import KeyedVectors
from pymorphy2 import MorphAnalyzer


# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ–ª—å
model = KeyedVectors.load_word2vec_format('model.txt', binary=False)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ—Ä—Ñ–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
morph = MorphAnalyzer()

def load_data(filename='corpus_lemmas.json'):
    with open(filename, 'r', encoding='utf-8') as f:
        return json.load(f)

def load_titles(filename='titles_lemmas.json'):
    with open(filename, 'r', encoding='utf-8') as f:
        return json.load(f)

def load_links(filename='all_links.txt'):
    with open(filename, 'r', encoding='utf-8') as f:
        lines = [line.strip() for line in f.read().split('\n') if line.strip()]
        return lines[::2], lines[1::2]  # –Ω–∞–∑–≤–∞–Ω–∏—è, —Å—Å—ã–ª–∫–∏


def mask_text(words, revealed_indices):
    result = []
    for i, word in enumerate(words):
        if word.strip() == '':
            result.append(word)
        elif re.match(r'^\W+$', word):
            result.append(word)
        elif i in revealed_indices:
            result.append(word)
        else:
            result.append('_' * len(word))
    return ''.join(result)


def get_all_possible_keys(word):
    parsed = morph.parse(word)
    keys = set()
    for p in parsed:
        lemma = p.normal_form
        pos = p.tag.POS  # –ù–∞–ø—Ä–∏–º–µ—Ä, 'NOUN', 'VERB'
        if lemma and pos:
            keys.add(f"{lemma}_{pos}")
    return keys


def find_nearest_word(user_input, text_lemmas, threshold=0.3):
    possible_keys = get_all_possible_keys(user_input)
    print(f"[DEBUG] –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è '{user_input}': {possible_keys}")

    if not possible_keys:
        print(f"[DEBUG] '{user_input}' –Ω–µ –∏–º–µ–µ—Ç –∫–ª—é—á–µ–π.")
        return None

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–ª—é—á–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    text_keys = prepare_text_keys(text_lemmas)

    best_match = None
    best_score = threshold

    for input_key in possible_keys:
        if input_key not in model:
            continue
        for i, (lemma, text_key) in enumerate(text_keys):
            if text_key not in model:
                continue
            sim = model.similarity(input_key, text_key)
            if sim > best_score:
                best_score = sim
                best_match = (i, lemma, sim)

    if best_match:
        print(f"[DEBUG] –ù–∞—à–ª–∏ –ø–æ—Ö–æ–∂–µ–µ: {user_input} ‚Üí {best_match[1]} (score={best_match[2]:.2f})")
        return best_match
    else:
        print(f"[DEBUG] –ù–µ—Ç –±–ª–∏–∑–∫–∏—Ö —Å–ª–æ–≤ –¥–ª—è '{user_input}' –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ {threshold}")
        return None


def prepare_text_keys(text_lemmas):
    keys = []
    for lemma in text_lemmas:
        parsed = morph.parse(lemma)
        if parsed:
            best = parsed[0]
            pos = best.tag.POS
            if pos:
                key = f"{best.normal_form}_{pos}"
                if key in model:
                    keys.append((lemma, key))
    return keys



def play_article(index, data, titles_data, article_links):
    first_article = data[index]
    original_words = first_article['original_words']
    lemmas = first_article['lemmas']

    title_text = titles_data[index]['title']
    title_lemmas = titles_data[index]['lemmas']
    link = article_links[index]

    title_words = re.findall(r'\w+|\W+', title_text)
    title_indices = set(range(len(title_words)))
    revealed_indices = set()

    print("\n" + "="*50)
    print(f"\n–ò–ì–†–ê ‚Ññ{index+1}")
    print("\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:")
    print(mask_text(title_words, revealed_indices))
    print("\n–¢–µ–∫—Å—Ç —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:")
    print(mask_text(original_words, revealed_indices))

    while True:
        guess = input("\n–í–≤–µ–¥–∏—Ç–µ –ª–µ–º–º—É –∏–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip().lower()
        if guess == 'exit':
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
            return False

                # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
        matches = [
            i for i, (lemma, orig) in enumerate(zip(lemmas, original_words))
            if lemma.lower() == guess or orig.lower() == guess
        ]

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        title_matches = [
            i for i in title_indices
            if morph.parse(title_words[i])[0].normal_form.lower() == guess
            or title_words[i].lower() == guess
        ]

        if matches or title_matches:
            revealed_indices.update(matches)
            revealed_indices.update(title_matches)

            print("\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:")
            print(mask_text(title_words, revealed_indices))

            print("\n–¢–µ–∫—Å—Ç —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:")
            print(mask_text(original_words, revealed_indices))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞—Å–∫—Ä—ã—Ç—ã –ª–∏ –ª–µ–º–º—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–º–µ–Ω–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            revealed_title_lemmas = [
                morph.parse(title_words[i])[0].normal_form.lower()
                for i in revealed_indices
                if i in title_indices and title_words[i].strip().isalpha()
            ]

            if all(lemma.lower() in revealed_title_lemmas for lemma in title_lemmas):
                revealed_indices.update(title_indices)

                print("\nüî• –ü–æ–±–µ–¥–∞! –í—ã —É–≥–∞–¥–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:", title_text)
                print("üìå –°—Å—ã–ª–∫–∞:", link)

                print("\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:")
                print(''.join(original_words))

                print("\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:")
                print(title_text)

                choice = input("\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ä–∞—É–Ω–¥? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
                return choice == '–¥–∞'

        else:
            nearest = find_nearest_word(guess, lemmas)
            if nearest:
                i, lemma, score = nearest
                print(f"–°–ª–æ–≤–∞ '{guess}' –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–æ –æ–Ω–æ –±–ª–∏–∑–∫–æ –∫ —Å–ª–æ–≤—É ‚Ññ{i} ('{original_words[i]}') —Å –ø–æ—Ö–æ–∂–µ—Å—Ç—å—é {score:.2f}.")
            else:
                print("–¢–∞–∫–æ–π –ª–µ–º–º—ã –∏–ª–∏ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ.")




def main():
    data = load_data()
    titles_data = load_titles()
    article_titles, article_links = load_links()

    index = 0
    n = len(data)

    while index < n:
        print(f"\n–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏: {index + 1} –∏–∑ {n}")
        print("–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:")
        print("  - '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –∏–≥—Ä—ã —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏")
        print("  - –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5), —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–µ–π")
        print("  - 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        command = input("\n–í–∞—à –≤–≤–æ–¥: ").strip().lower()

        if command == 'exit':
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
            break

        elif command == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
            continue_game = play_article(index, data, titles_data, article_links)
            if continue_game:
                index += 1
            else:
                break

        elif command.isdigit():
            new_index = int(command) - 1
            if 0 <= new_index < n:
                index = new_index
            else:
                print(f"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {n}.")
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    print("\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")


if __name__ == '__main__':
    main()
